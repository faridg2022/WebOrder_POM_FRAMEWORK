<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="1" passed="0" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-10-04T19:57:54 GMT-04:00" name="Page Object test example" finished-at="2022-10-04T19:58:14 GMT-04:00" duration-ms="20534">
    <groups>
    </groups>
    <test started-at="2022-10-04T19:57:54 GMT-04:00" name="test-1" finished-at="2022-10-04T19:58:14 GMT-04:00" duration-ms="20534">
      <class name="com.webOrder.test.Weborder_create">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:com.webOrder.test.Weborder_create@2dc54ad4]" started-at="2022-10-04T19:57:54 GMT-04:00" name="SetUp" finished-at="2022-10-04T19:57:54 GMT-04:00" duration-ms="531" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="initializeTestBaseSetup(java.lang.String,java.lang.String)[pri:0, instance:com.webOrder.test.Weborder_create@2dc54ad4]" started-at="2022-10-04T19:57:54 GMT-04:00" name="initializeTestBaseSetup" finished-at="2022-10-04T19:58:04 GMT-04:00" duration-ms="9721" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http://secure.smartbearsoftware.com/samples/TestComplete11/WebOrders/Login.aspx?11%2fWebOrders%2fDefault.aspx]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeTestBaseSetup -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.webOrder.test.Weborder_create@2dc54ad4]" started-at="2022-10-04T19:58:04 GMT-04:00" name="setUp" finished-at="2022-10-04T19:58:04 GMT-04:00" duration-ms="59" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="createOrder(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.webOrder.test.Weborder_create@2dc54ad4]" started-at="2022-10-04T19:58:04 GMT-04:00" name="createOrder" data-provider="login" finished-at="2022-10-04T19:58:11 GMT-04:00" duration-ms="6778" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tester]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[test]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[ScreenSaver]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[10 john]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[brooklyn]]>
              </value>
            </param>
            <param index="9">
              <value>
                <![CDATA[new york]]>
              </value>
            </param>
            <param index="10">
              <value>
                <![CDATA[10012]]>
              </value>
            </param>
            <param index="11">
              <value>
                <![CDATA[14253743883]]>
              </value>
            </param>
            <param index="12">
              <value>
                <![CDATA[12/23]]>
              </value>
            </param>
            <param index="13">
              <value>
                <![CDATA[Quantity must be greater than zero.]]>
              </value>
            </param>
            <param index="14">
              <value>
                <![CDATA[Field 'Customer name' cannot be empty]]>
              </value>
            </param>
            <param index="15">
              <value>
                <![CDATA[ Field 'Street' cannot be empty]]>
              </value>
            </param>
            <param index="16">
              <value>
                <![CDATA[Field 'City' cannot be empty.]]>
              </value>
            </param>
            <param index="17">
              <value>
                <![CDATA[Field 'Zip' cannot be empty.]]>
              </value>
            </param>
            <param index="18">
              <value>
                <![CDATA[Select a card type.]]>
              </value>
            </param>
            <param index="19">
              <value>
                <![CDATA[Field 'Card Nr' cannot be empty.]]>
              </value>
            </param>
            <param index="20">
              <value>
                <![CDATA[Field 'Expire date' cannot be empty.]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Quantity must be greater than zero.] but found [Field 'Customer name' cannot be empty.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Quantity must be greater than zero.] but found [Field 'Customer name' cannot be empty.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.webOrder.home.WebOrder_CreateOrderPage.verifyErrorMessage(WebOrder_CreateOrderPage.java:168)
at com.webOrder.test.Weborder_create.createOrder(Weborder_create.java:82)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createOrder -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:com.webOrder.test.Weborder_create@2dc54ad4]" started-at="2022-10-04T19:58:11 GMT-04:00" name="tearDown" finished-at="2022-10-04T19:58:11 GMT-04:00" duration-ms="177" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createOrder status=FAILURE method=Weborder_create.createOrder(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:com.webOrder.test.Weborder_create@2dc54ad4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.webOrder.test.Weborder_create@2dc54ad4]" started-at="2022-10-04T19:58:11 GMT-04:00" name="tearDown" finished-at="2022-10-04T19:58:14 GMT-04:00" duration-ms="3192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.webOrder.test.Weborder_create -->
    </test> <!-- test-1 -->
  </suite> <!-- Page Object test example -->
</testng-results>
